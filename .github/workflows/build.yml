name: Build and Release Application

on:
  push:
    tags:
      - 'v*' # Trigger on version tags like v1.0, v2.1.1, etc.
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    strategy:
      matrix:
        # Define OS and corresponding asset name parts
        include:
          - os: ubuntu-latest
            asset_name_part: Linux
          - os: macos-latest
            asset_name_part: macOS
          - os: windows-latest
            asset_name_part: Windows
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Install Linux GUI dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk tk-dev xvfb zip
      # Ensure zip is installed for packaging

    - name: Install macOS dependencies (if any specific needed)
      if: runner.os == 'macOS'
      run: |
        # Add any specific macOS dependency installations here if needed in the future
        # For now, we might need 'zip' if not preinstalled, though it usually is.
        # brew install zip # Uncomment if zip is missing
        echo "No specific macOS dependencies to install for now."

    - name: Install Windows dependencies (if any specific needed)
      if: runner.os == 'Windows'
      run: |
        # No specific Windows dependencies needed for build itself
        echo "No specific Windows dependencies to install."
      shell: bash

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash

    - name: Build with PyInstaller
      run: |
        if [[ "${{ runner.os }}" == "Linux" ]]; then
          xvfb-run pyinstaller main.spec
        else
          pyinstaller main.spec
        fi
      shell: bash

    - name: Package Application for Release
      run: |
        cd dist
        # Determine archive name based on OS and tag
        RELEASE_NAME="${{ matrix.asset_name_part }}-${{ github.ref_name }}" # e.g., Windows-v1.0.0
        ARCHIVE_NAME="${RELEASE_NAME}.zip"

        echo "Packaging contents of $(pwd) into ${ARCHIVE_NAME}"

        if [[ "${{ runner.os }}" == "Windows" ]]; then
          # Use PowerShell for zip on Windows
          powershell Compress-Archive -Path * -DestinationPath "../${ARCHIVE_NAME}" -Force
        else
          # Use zip on Linux/macOS
          zip -r "../${ARCHIVE_NAME}" .
        fi
        cd ..
        echo "ARCHIVE_PATH=${ARCHIVE_NAME}" >> $GITHUB_ENV # Save archive path for next step
      shell: bash

    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2 # Use softprops action
      if: startsWith(github.ref, 'refs/tags/') # Only run this step for tagged commits
      with:
        files: ${{ env.ARCHIVE_PATH }} # Use the archive path saved in the previous step
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Needs token to create release 